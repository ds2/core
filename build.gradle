plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.7.0'
    id 'net.researchgate.release' version '2.8.1'
    id 'ds2.base' version '1.0.1'
    id "com.github.hierynomus.license" version "0.16.1"
    id "com.github.hierynomus.license-base" version "0.16.1"
    id("com.github.spotbugs") version "5.0.7"
    id "ds2.gitinfo" version "0.0.1"
}

description = "DS/2 OSS Core Project"

ext.scmBranchName = ""
ext.revisionId = ""
ext.date = ""

allprojects {
    apply plugin: 'ds2.base'
    apply plugin: "com.github.hierynomus.license"
    apply plugin: 'ds2.gitinfo'

    group = 'ds2.oss.core'

    ext.log4j2Version = '2.14.1'
    ext.logbackVersion = '1.2.4'
    ext.jacksonVersion = '2.13.1'

    baseConfig {
        javaVersion = JavaVersion.VERSION_1_8
        //useToolchain = false
    }
    gitInfo() {
        countCommitId = 10
        generatePropertiesIn = "" + project.buildDir + "/hello.properties"
        branchPropertyName = "scmBranchName"
        revisionPropertyName = "revisionId"
        builddatePropertyName = 'date'
    }
    repositories {
        mavenLocal()
        if (project.hasProperty('ds2RepoUrl')) {
            println 'Can use DS2 Repo :)'
            maven {
                url ds2RepoUrl
                credentials {
                    username ds2RepoUser
                    password ds2RepoPw
                }
            }
        }
        maven { url "https://maven.java.net/content/groups/promoted/" }
        maven { url "https://ds2mavenrepos.blob.core.windows.net/releases/" }
        maven { url "https://ds2.jfrog.io/artifactory/oss-releases/" }
        mavenCentral()
    }

    release {
        git {
            requireBranch = 'release/0.1'
        }
    }
    license {
        ext.year = '2020'
        ext.name = 'DS/2'
        ext.email = 'dstrauss@ds-2.de'
        header rootProject.file('aslv2_header.txt')
        ignoreFailures = true
        strictCheck false
        includes(["**/*.java", "**/*.properties"])
        excludes(["**/*Test.java"])
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }
    tasks.withType(org.gradle.jvm.tasks.Jar) {
        it.duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    publishing {
        repositories {
            maven {
                def releasesRepoUrl = "$buildDir/repos/releases"
                def snapshotsRepoUrl = "$buildDir/repos/snapshots"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }
        publications {
            core(MavenPublication) {
                from components.java
                artifact srcJar {
                    classifier "sources"
                }
                artifact docJar {
                    classifier "javadoc"
                }
            }
        }
    }

    spotbugs {
        //toolVersion = "3.1.9"
        //sourceSets = [sourceSets.main]
        ignoreFailures = false
        reportsDir = file("$project.buildDir/findbugsReports")
        effort = "max"
        showProgress = true
        reportLevel = "low"
    }
    // checkstyle {
    //     ignoreFailures = true
    // }
    spotbugsMain {
        reports {
            xml {
                enabled true
//                destination "build/findbugs.xml"
            }
            html.enabled true
            //html.stylesheet resources.text.fromFile('config/xsl/findbugs-custom.xsl')
        }
    }
    // tasks.withType(Checkstyle) {
    //     reports {
    //         xml.enabled false
    //         html.enabled true
    //         //html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
    //     }
    // }

}

beforeReleaseBuild.dependsOn project.tasks.getByName('license')
